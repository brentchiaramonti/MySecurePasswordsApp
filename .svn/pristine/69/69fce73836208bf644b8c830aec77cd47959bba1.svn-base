package edu.ben.labs.lab04;

import java.util.ArrayList;
import java.util.List;

/**
 * Password Generator class, a static class with only the generate password method which takes in 3 booleans and a length and makes a random password.
 * @author brent
 * @version 10/11/16
 */
public class PasswordGenerator {
	
	//Creates 4 character arrays, each containing a subset of all the characters that will make up a password
	private static final char[] LOWER_CASE = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
	private static final char[] UPPER_CASE = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
	private static final char[] NUMBERS = new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
	private static final char[] SYMBOLS = new char[] {'@', '#', '$', '%', '^', '&', '*', '-', '+', '='};
	
	
	/**
	 * Method that generates a random password depending on the given inputs.
	 * @param hasCaps Boolean value, If true the password can have capital letters, also adds 1 to length
	 * @param hasNumbers Boolean value, If true the password can have numbers, also adds 1 to length
	 * @param hasSymbols Boolean value, If true the password can have symbols, also adds 1 to length
	 * @param length Int value, how long the password will be
	 * @return A random password generated by the given parameters
	 */
	public static String generatePassword(boolean hasCaps, boolean hasNumbers, boolean hasSymbols, int length) {
		
		//initializes the variable that will hold the password
		String password = "";
		
		//if the password will have caps
		if(hasCaps) {
			
			//selects a random number from the uppercase array
			int range = UPPER_CASE.length;
			int randomNumber = (int)(Math.random() * range);
			
			//adds the character to the password
			password += UPPER_CASE[randomNumber];
		}
		
		//if the password will have numbers
		if(hasNumbers) {
			
			//selects a random number from the numbers array
			int range = NUMBERS.length;
			int randomNumber = (int)(Math.random() * range);
			
			//adds the character to the password
			password += NUMBERS[randomNumber];
		}
		
		//if the password will have symbols
		if(hasSymbols) {
			
			//selects a random number for the symbols array
			int range = SYMBOLS.length;
			int randomNumber = (int)(Math.random() * range);
			
			//adds the character to the password
			password += SYMBOLS[randomNumber];
		}
		
		//boolean used to check if an array has been chosen to add to the password
		boolean chosen;
		
		//loops until the given length is added
		for(int i = 0; i < length; i++) {
			
			//sets chosen to false for the while loop
			chosen = false;
			
			//loops until a character is added to the string
			while(!chosen) {
				
				//selects a random number between 0 and 3
				int choosenArray = (int)(Math.random() * 4);
				
				//if the number is 0
				if(choosenArray == 0) {
					
					//sets that an array has been chosen
					chosen = true;
					
					//selects a random number in the lowercase array
					int range = LOWER_CASE.length;
					int randomNumber = (int)(Math.random() * range);
					
					//adds the selected character to the password
					password += LOWER_CASE[randomNumber];
				}
				
				//if the number is 1
				if(choosenArray == 1) {
					
					//checks if there should be caps in the password
					if(hasCaps) {
						
						//sets that an array has been chosen
						chosen = true;
						
						//selects a random number in the uppercase array
						int range = UPPER_CASE.length;
						int randomNumber = (int)(Math.random() * range);
						
						//adds the selected character to the password
						password += UPPER_CASE[randomNumber];
					}
				}
				
				//if the number is 2
				if(choosenArray == 2) {
					
					//checks if there should be numbers in the password
					if(hasNumbers) {
						
						//sets that an array has been chosen
						chosen = true;
						
						//selects a random number in the numbers array
						int range = NUMBERS.length;
						int randomNumber = (int)(Math.random() * range);
						
						//adds the selected number to the password
						password += NUMBERS[randomNumber];
					}
				}
				
				//if the number is 3
				if(choosenArray == 3) {
					
					//checks if there should be symbols in the password
					if(hasSymbols) {
						
						//sets that an array has been chosen
						chosen = true;
						
						//selects a random number in the symbols array
						int range = SYMBOLS.length;
						int randomNumber = (int)(Math.random() * range);
						
						//adds the selected number to the password
						password += SYMBOLS[randomNumber];
					}
				}
			}
		}
		
		//shuffles the password and returns it
		return shuffle(password);
	}
	
	/**
	 * Shuffles a string randomly
	 * @param input The string that will be shuffled
	 * @return A randomized string of the given string
	 */
	private static String shuffle(String input){
		
		//makes an arraylist of characters
        List<Character> characters = new ArrayList<Character>();
        
        //stores each character of the string to the character array
        for(char c:input.toCharArray()){
        	
        	//adds the character to the character array
            characters.add(c);
        }
        
        //makes a new stringbuilder the same length as the original string
        StringBuilder output = new StringBuilder(input.length());
        
        //loops until the characters array is empty
        while(characters.size()!=0){
        	
        	//selects a random position in the array
            int randPicker = (int)(Math.random()*characters.size());
            
            //adds that character from the array to the string, removing the character from the array
            output.append(characters.remove(randPicker));
        }
        
        //returns the randomized string
        return output.toString();
    }
}
